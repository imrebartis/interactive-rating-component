"use strict";import{DOMUtils}from"./utils.js";export class RatingComponent{constructor(){this.ratingScaleButtons=DOMUtils.getElements(".rating-scale-btn");this.ratingSubmitButton=DOMUtils.getElement("#rating-submit");this.ratingInputSection=DOMUtils.getElement("#rating-input-section");this.ratingConfirmationSection=DOMUtils.getElement("#rating-confirmation-section");this.selectedRatingDisplay=DOMUtils.getElement("#selected-rating");this.validationMessageElement=DOMUtils.getElement("#validation-message");this.currentRating=0;this.selectedButton=null}init(){this.addEventListeners();this.setInitialFocus()}addEventListeners(){if(this.ratingScaleButtons.length>0){this.ratingScaleButtons.forEach((button=>{DOMUtils.addEventListener(button,"click",this.handleRatingButtonClick.bind(this,button));DOMUtils.addEventListener(button,"mouseenter",this.highlightButton.bind(this,button));DOMUtils.addEventListener(button,"mouseleave",this.resetButtonHighlight.bind(this));DOMUtils.addEventListener(button,"keydown",this.handleButtonKeydown.bind(this,button))}))}if(this.ratingSubmitButton){DOMUtils.addEventListener(this.ratingSubmitButton,"click",this.handleSubmit.bind(this));this.ratingSubmitButton.setAttribute("aria-live","polite")}}setInitialFocus(){if(this.ratingScaleButtons.length>0){this.ratingScaleButtons[0].setAttribute("tabindex","0");this.ratingScaleButtons[0].focus()}}updateSubmitButtonState(button){const rating=parseInt(button.value,10);this.ratingSubmitButton.setAttribute("aria-label",`Submit rating of ${rating}`);this.ratingSubmitButton.removeAttribute("aria-disabled")}handleRatingButtonClick(button){this.updateRating(button.value);this.updateButtonState(button);this.clearValidationError();this.announceRatingChange();this.updateSubmitButtonState(button)}highlightButton(button){this.selectedButton?.classList.add("selected");button.classList.add("hovered")}resetButtonHighlight(){this.selectedButton?this.updateButtonState(this.selectedButton):this.resetButtonStyles()}handleButtonKeydown(event,button){if(["Enter"," "].includes(event.key)){event.preventDefault();this.updateRating(button.value);this.updateButtonState(button);this.updateSubmitButtonState(button)}}handleSubmit(){this.currentRating>0?this.showConfirmation():this.showValidationError("Please select a rating before submitting.")}updateRating(value){this.currentRating=value;this.selectedRatingDisplay.textContent=value}updateButtonState(button){this.resetButtonStyles();button.classList.add("selected");this.selectedButton=button;this.ratingSubmitButton.removeAttribute("aria-disabled")}resetButtonStyles(){this.ratingScaleButtons.forEach((btn=>btn.classList.remove("selected","hovered")));if(this.selectedButton){this.selectedButton.classList.add("selected")}}showValidationError(message){this.validationMessageElement.textContent=message;this.validationMessageElement.classList.remove("hidden");this.validationMessageElement.focus()}clearValidationError(){this.validationMessageElement.classList.add("hidden")}showConfirmation(){this.announceSubmission();this.ratingInputSection.classList.add("hidden");this.ratingConfirmationSection.classList.remove("hidden");this.ratingConfirmationSection.focus()}announceRatingChange(){this.selectedRatingDisplay.setAttribute("aria-live","assertive");this.selectedRatingDisplay.setAttribute("aria-atomic","true")}announceSubmission(){this.ratingConfirmationSection.setAttribute("aria-live","assertive")}cleanup(){if(this.ratingScaleButtons.length>0){this.ratingScaleButtons.forEach((button=>{DOMUtils.removeEventListener(button,"click",this.handleRatingButtonClick.bind(this,button));DOMUtils.removeEventListener(button,"mouseenter",this.highlightButton.bind(this,button));DOMUtils.removeEventListener(button,"mouseleave",this.resetButtonHighlight.bind(this));DOMUtils.removeEventListener(button,"keydown",this.handleButtonKeydown.bind(this,button))}))}if(this.ratingSubmitButton){DOMUtils.removeEventListener(this.ratingSubmitButton,"click",this.handleSubmit.bind(this))}}}let ratingComponent;document.addEventListener("DOMContentLoaded",(()=>{ratingComponent=new RatingComponent;ratingComponent.init()}));window.addEventListener("unload",(()=>{if(ratingComponent){ratingComponent.cleanup()}}));import"./index.js";import{RatingComponent}from"./index.js";describe("RatingComponent",(()=>{document.body.innerHTML=`\n    <main class="rating-container" role="main">\n      <section class="rating-panel rating-input-state" id="rating-input-section" aria-labelledby="rating-prompt">\n        <header class="rating-icon">\n          <img src="images/icon-star.svg" alt="Star icon">\n        </header>\n        <h1 id="rating-prompt" class="rating-title">How did we do?</h1>\n        <p class="rating-description">Please let us know how we did with your support request. All feedback is appreciated\n          to help us improve our offering!</p>\n        <p id="validation-message" class="error-feedback hidden" role="alert"></p>\n        <div class="rating-scale" role="group" aria-label="Rating scale">\n          <button class="rating-scale-btn" value="1">1</button>\n          <button class="rating-scale-btn" value="2">2</button>\n          <button class="rating-scale-btn" value="3">3</button>\n          <button class="rating-scale-btn" value="4">4</button>\n          <button class="rating-scale-btn" value="5">5</button>\n        </div>\n        <button class="submit-rating-btn" id="rating-submit" aria-disabled="true">Submit</button>\n      </section>\n      <section class="rating-panel rating-confirmation-state hidden" id="rating-confirmation-section" aria-live="polite">\n        <img src="images/illustration-thank-you.svg" alt="Thank you illustration">\n        <p class="rating-result">You selected <span id="selected-rating">0</span> out of 5</p>\n        <h2 class="rating-thank-you-title">Thank you!</h2>\n        <p class="confirmation-message">We appreciate you taking the time to give a rating. If you ever need more support,\n          don't hesitate to get in touch!</p>\n      </section>\n    </main>\n  `;let ratingComponent;beforeEach((()=>{ratingComponent=new RatingComponent;ratingComponent.init()}));test("should initialize with correct elements",(()=>{expect(ratingComponent.ratingScaleButtons).toHaveLength(5);expect(ratingComponent.ratingSubmitButton).toBeTruthy();expect(ratingComponent.ratingInputSection).toBeTruthy();expect(ratingComponent.ratingConfirmationSection).toBeTruthy();expect(ratingComponent.selectedRatingDisplay).toBeTruthy();expect(ratingComponent.validationMessageElement).toBeTruthy()}));test("should handle rating button click",(()=>{const button=ratingComponent.ratingScaleButtons[0];button.click();expect(ratingComponent.currentRating).toBe("1");expect(ratingComponent.selectedRatingDisplay.textContent).toBe("1")}));test("should show validation error if no rating is selected on submit",(()=>{ratingComponent.handleSubmit();expect(ratingComponent.validationMessageElement.classList).not.toContain("hidden")}));test("should show confirmation section on valid submit",(()=>{const button=ratingComponent.ratingScaleButtons[0];button.click();ratingComponent.handleSubmit();expect(ratingComponent.ratingInputSection.classList).toContain("hidden");expect(ratingComponent.ratingConfirmationSection.classList).not.toContain("hidden")}))}));"use strict";export const DOMUtils={getElement(selector){const element=document.querySelector(selector);if(!element){throw new Error(`Element not found for selector: ${selector}`)}return element},getElements(selector){const elements=document.querySelectorAll(selector);if(elements.length===0){throw new Error(`Elements not found for selector: ${selector}`)}return elements},addEventListener(element,event,handler){if(element){element.addEventListener(event,handler)}else{throw new Error(`Cannot add event listener to null element`)}}};import{DOMUtils}from"./utils.js";describe("DOMUtils",(()=>{document.body.innerHTML=`\n    <div id="test-element"></div>\n    <div class="test-elements"></div>\n    <div class="test-elements"></div>\n  `;test("getElement should return the element for a valid selector",(()=>{expect(DOMUtils.getElement("#test-element")).toBeTruthy()}));test("getElement should throw an error for an invalid selector",(()=>{expect((()=>DOMUtils.getElement("#invalid-element"))).toThrow("Element not found for selector: #invalid-element")}));test("getElements should return the elements for a valid selector",(()=>{expect(DOMUtils.getElements(".test-elements")).toHaveLength(2)}));test("getElements should throw an error for an invalid selector",(()=>{expect((()=>DOMUtils.getElements(".invalid-elements"))).toThrow("Elements not found for selector: .invalid-elements")}));test("addEventListener should add an event listener to the element",(()=>{const element=DOMUtils.getElement("#test-element");const handler=jest.fn();DOMUtils.addEventListener(element,"click",handler);element.click();expect(handler).toHaveBeenCalled()}));test("addEventListener should throw an error if the element is null",(()=>{expect((()=>DOMUtils.addEventListener(null,"click",(()=>{})))).toThrow("Cannot add event listener to null element")}))}));